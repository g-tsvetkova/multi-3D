Loading train data with 515 files.
Loading test data with 129 files.
	[train]	transformer.model.decoder.embed_tokens.weight:	torch.Size([131, 256])
	[train]	transformer.model.decoder.embed_positions.weight:	torch.Size([8194, 256])
	[train]	transformer.model.decoder.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.0.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.0.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.0.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.0.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.0.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.0.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.0.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.0.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.1.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.1.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.1.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.1.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.1.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.1.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.1.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.1.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.2.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.2.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.2.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.2.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.2.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.2.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.2.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.2.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.3.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.3.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.3.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.3.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.3.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.3.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.3.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.3.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.4.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.4.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.4.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.4.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.4.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.4.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.4.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.4.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.5.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.5.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.5.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.5.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.5.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.5.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.5.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.5.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.6.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.6.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.6.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.6.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.6.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.6.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.6.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.6.final_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.7.self_attn.k_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.7.self_attn.v_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.7.self_attn.q_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.weight:	torch.Size([256, 256])
	[train]	transformer.model.decoder.layers.7.self_attn.out_proj.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.self_attn_layer_norm.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.fc1.weight:	torch.Size([1024, 256])
	[train]	transformer.model.decoder.layers.7.fc1.bias:	torch.Size([1024])
	[train]	transformer.model.decoder.layers.7.fc2.weight:	torch.Size([256, 1024])
	[train]	transformer.model.decoder.layers.7.fc2.bias:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.weight:	torch.Size([256])
	[train]	transformer.model.decoder.layers.7.final_layer_norm.bias:	torch.Size([256])
call with args: Namespace(base_lr=0.0001, final_lr=1e-06, weight_decay=0.1, clip_gradient=0.1, warm_lr=1e-06, warm_lr_iters=1000, pad_id=-1, dataset='objaverse', augment=False, n_discrete_size=128, n_max_triangles=800, model='mesh_xl', llm='mesh-xl/mesh-xl-125m', text_condition=None, image_condition=None, pretrained_weights=None, dataset_num_workers=8, batchsize_per_gpu=1, start_epoch=0, max_epoch=100, start_eval_after=-1, eval_every_iteration=4000, seed=0, test_only=False, sample_rounds=100, criterion=None, test_ckpt='', checkpoint_dir='./checkpoints', save_every=20000, log_every=10)
FullyShardedDataParallel(
  (_fsdp_wrapped_module): MeshXL(
    (tokenizer): MeshTokenizer()
    (transformer): OPTForCausalLM(
      (model): OPTModel(
        (decoder): OPTDecoder(
          (embed_tokens): Embedding(131, 256, padding_idx=130)
          (embed_positions): OPTLearnedPositionalEmbedding(8194, 256)
          (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (layers): ModuleList(
            (0-7): 8 x FullyShardedDataParallel(
              (_fsdp_wrapped_module): CheckpointWrapper(
                (_checkpoint_wrapped_module): OPTDecoderLayer(
                  (self_attn): OPTAttention(
                    (k_proj): Linear(in_features=256, out_features=256, bias=True)
                    (v_proj): Linear(in_features=256, out_features=256, bias=True)
                    (q_proj): Linear(in_features=256, out_features=256, bias=True)
                    (out_proj): Linear(in_features=256, out_features=256, bias=True)
                  )
                  (activation_fn): ReLU()
                  (self_attn_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (fc1): Linear(in_features=256, out_features=1024, bias=True)
                  (fc2): Linear(in_features=1024, out_features=256, bias=True)
                  (final_layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
              )
            )
          )
        )
      )
      (lm_head): Linear(in_features=256, out_features=131, bias=False)
    )
  )
)
Loss: 4.809508323669434
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0431, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Epoch [0/100]; Iter [0/12800]; loss 4.8095; gen_loss 4.8095; LR 1.00e-06; Iter time 1.76s; ETA 6:15:53; Mem 4290.41MB
Loss: 4.932173728942871
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 5.031808376312256
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.920366287231445
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.816051483154297
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.988270282745361
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.905907154083252
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.963059425354004
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.88218355178833
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.874852657318115
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0090, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Loss: 4.932605266571045
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0089, -0.0199,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
Epoch [0/100]; Iter [10/12800]; loss 4.9247; gen_loss 4.9247; LR 1.99e-06; Iter time 0.54s; ETA 1:55:16; Mem 4290.41MB
Loss: 4.872658729553223
First 5 weights of embed_tokens: tensor([[ 0.0293, -0.0007,  0.0045,  0.0080, -0.0041],
        [ 0.0277,  0.0322, -0.0017,  0.0012,  0.0487],
        [ 0.0250, -0.0131,  0.0052, -0.0430, -0.0175],
        [-0.0150,  0.0089, -0.0200,  0.0130,  0.0002],
        [ 0.0366, -0.0110, -0.0104, -0.0309, -0.0196]], device='cuda:0')
